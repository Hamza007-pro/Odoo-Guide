"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mobx-react-lite";
exports.ids = ["vendor-chunks/mobx-react-lite"];
exports.modules = {

/***/ "(ssr)/./node_modules/mobx-react-lite/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/mobx-react-lite/dist/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./mobxreactlite.cjs.development.js */ \"(ssr)/./node_modules/mobx-react-lite/dist/mobxreactlite.cjs.development.js\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC1saXRlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUNZOztBQUVaLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw0SkFBOEQ7QUFDaEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtb2Rvby1kb2NzLy4vbm9kZV9tb2R1bGVzL21vYngtcmVhY3QtbGl0ZS9kaXN0L2luZGV4LmpzPzkxOTQiXSwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCdcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vYnhyZWFjdGxpdGUuY2pzLnByb2R1Y3Rpb24ubWluLmpzJylcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2J4cmVhY3RsaXRlLmNqcy5kZXZlbG9wbWVudC5qcycpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mobx-react-lite/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mobx-react-lite/dist/mobxreactlite.cjs.development.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mobx-react-lite/dist/mobxreactlite.cjs.development.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar mobx = __webpack_require__(/*! mobx */ \"(ssr)/./node_modules/mobx/dist/index.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar React__default = _interopDefault(React);\nvar reactDom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar shim = __webpack_require__(/*! use-sync-external-store/shim */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n\nif (!React.useState) {\n  throw new Error(\"mobx-react-lite requires React with Hooks support\");\n}\nif (!mobx.makeObservable) {\n  throw new Error(\"mobx-react-lite@3 requires mobx at least version 6 to be available\");\n}\n\nfunction defaultNoopBatch(callback) {\n  callback();\n}\nfunction observerBatching(reactionScheduler) {\n  if (!reactionScheduler) {\n    reactionScheduler = defaultNoopBatch;\n    {\n      console.warn(\"[MobX] Failed to get unstable_batched updates from react-dom / react-native\");\n    }\n  }\n  mobx.configure({\n    reactionScheduler: reactionScheduler\n  });\n}\nvar isObserverBatched = function isObserverBatched() {\n  {\n    console.warn(\"[MobX] Deprecated\");\n  }\n  return true;\n};\n\nvar deprecatedMessages = [];\nfunction useDeprecated(msg) {\n  if (!deprecatedMessages.includes(msg)) {\n    deprecatedMessages.push(msg);\n    console.warn(msg);\n  }\n}\n\nfunction printDebugValue(v) {\n  return mobx.getDependencyTree(v);\n}\n\nvar globalIsUsingStaticRendering = false;\nfunction enableStaticRendering(enable) {\n  globalIsUsingStaticRendering = enable;\n}\nfunction isUsingStaticRendering() {\n  return globalIsUsingStaticRendering;\n}\n\nvar REGISTRY_FINALIZE_AFTER = 10000;\nvar REGISTRY_SWEEP_INTERVAL = 10000;\nvar TimerBasedFinalizationRegistry = /*#__PURE__*/function () {\n  function TimerBasedFinalizationRegistry(finalize) {\n    var _this = this;\n    this.finalize = void 0;\n    this.registrations = new Map();\n    this.sweepTimeout = void 0;\n    this.sweep = function (maxAge) {\n      if (maxAge === void 0) {\n        maxAge = REGISTRY_FINALIZE_AFTER;\n      }\n      // cancel timeout so we can force sweep anytime\n      clearTimeout(_this.sweepTimeout);\n      _this.sweepTimeout = undefined;\n      var now = Date.now();\n      _this.registrations.forEach(function (registration, token) {\n        if (now - registration.registeredAt >= maxAge) {\n          _this.finalize(registration.value);\n          _this.registrations[\"delete\"](token);\n        }\n      });\n      if (_this.registrations.size > 0) {\n        _this.scheduleSweep();\n      }\n    };\n    this.finalizeAllImmediately = function () {\n      _this.sweep(0);\n    };\n    this.finalize = finalize;\n  }\n  // Token is actually required with this impl\n  var _proto = TimerBasedFinalizationRegistry.prototype;\n  _proto.register = function register(target, value, token) {\n    this.registrations.set(token, {\n      value: value,\n      registeredAt: Date.now()\n    });\n    this.scheduleSweep();\n  };\n  _proto.unregister = function unregister(token) {\n    this.registrations[\"delete\"](token);\n  }\n  // Bound so it can be used directly as setTimeout callback.\n  ;\n  _proto.scheduleSweep = function scheduleSweep() {\n    if (this.sweepTimeout === undefined) {\n      this.sweepTimeout = setTimeout(this.sweep, REGISTRY_SWEEP_INTERVAL);\n    }\n  };\n  return TimerBasedFinalizationRegistry;\n}();\nvar UniversalFinalizationRegistry = typeof FinalizationRegistry !== \"undefined\" ? FinalizationRegistry : TimerBasedFinalizationRegistry;\n\nvar observerFinalizationRegistry = /*#__PURE__*/new UniversalFinalizationRegistry(function (adm) {\n  var _adm$reaction;\n  (_adm$reaction = adm.reaction) == null ? void 0 : _adm$reaction.dispose();\n  adm.reaction = null;\n});\n\n// Required by SSR when hydrating #3669\nvar getServerSnapshot = function getServerSnapshot() {};\nfunction createReaction(adm) {\n  adm.reaction = new mobx.Reaction(\"observer\" + adm.name, function () {\n    adm.stateVersion = Symbol();\n    // onStoreChange won't be available until the component \"mounts\".\n    // If state changes in between initial render and mount,\n    // `useSyncExternalStore` should handle that by checking the state version and issuing update.\n    adm.onStoreChange == null ? void 0 : adm.onStoreChange();\n  });\n}\nfunction useObserver(render, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = \"observed\";\n  }\n  if (isUsingStaticRendering()) {\n    return render();\n  }\n  var admRef = React__default.useRef(null);\n  if (!admRef.current) {\n    // First render\n    var _adm = {\n      reaction: null,\n      onStoreChange: null,\n      stateVersion: Symbol(),\n      name: baseComponentName,\n      subscribe: function subscribe(onStoreChange) {\n        // Do NOT access admRef here!\n        observerFinalizationRegistry.unregister(_adm);\n        _adm.onStoreChange = onStoreChange;\n        if (!_adm.reaction) {\n          // We've lost our reaction and therefore all subscriptions, occurs when:\n          // 1. Timer based finalization registry disposed reaction before component mounted.\n          // 2. React \"re-mounts\" same component without calling render in between (typically <StrictMode>).\n          // We have to recreate reaction and schedule re-render to recreate subscriptions,\n          // even if state did not change.\n          createReaction(_adm);\n          // `onStoreChange` won't force update if subsequent `getSnapshot` returns same value.\n          // So we make sure that is not the case\n          _adm.stateVersion = Symbol();\n        }\n        return function () {\n          var _adm$reaction;\n          // Do NOT access admRef here!\n          _adm.onStoreChange = null;\n          (_adm$reaction = _adm.reaction) == null ? void 0 : _adm$reaction.dispose();\n          _adm.reaction = null;\n        };\n      },\n      getSnapshot: function getSnapshot() {\n        // Do NOT access admRef here!\n        return _adm.stateVersion;\n      }\n    };\n    admRef.current = _adm;\n  }\n  var adm = admRef.current;\n  if (!adm.reaction) {\n    // First render or reaction was disposed by registry before subscribe\n    createReaction(adm);\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    observerFinalizationRegistry.register(admRef, adm, adm);\n  }\n  React__default.useDebugValue(adm.reaction, printDebugValue);\n  shim.useSyncExternalStore(\n  // Both of these must be stable, otherwise it would keep resubscribing every render.\n  adm.subscribe, adm.getSnapshot, getServerSnapshot);\n  // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n  var renderResult;\n  var exception;\n  adm.reaction.track(function () {\n    try {\n      renderResult = render();\n    } catch (e) {\n      exception = e;\n    }\n  });\n  if (exception) {\n    throw exception; // re-throw any exceptions caught during rendering\n  }\n\n  return renderResult;\n}\n\nvar warnObserverOptionsDeprecated = true;\nvar hasSymbol = typeof Symbol === \"function\" && Symbol[\"for\"];\n// Using react-is had some issues (and operates on elements, not on types), see #608 / #609\nvar ReactForwardRefSymbol = hasSymbol ? /*#__PURE__*/Symbol[\"for\"](\"react.forward_ref\") : typeof React.forwardRef === \"function\" && /*#__PURE__*/React.forwardRef(function (props) {\n  return null;\n})[\"$$typeof\"];\nvar ReactMemoSymbol = hasSymbol ? /*#__PURE__*/Symbol[\"for\"](\"react.memo\") : typeof React.memo === \"function\" && /*#__PURE__*/React.memo(function (props) {\n  return null;\n})[\"$$typeof\"];\n// n.b. base case is not used for actual typings or exported in the typing files\nfunction observer(baseComponent,\n// TODO remove in next major\noptions) {\n  var _options$forwardRef;\n  if ( warnObserverOptionsDeprecated && options) {\n    warnObserverOptionsDeprecated = false;\n    console.warn(\"[mobx-react-lite] `observer(fn, { forwardRef: true })` is deprecated, use `observer(React.forwardRef(fn))`\");\n  }\n  if (ReactMemoSymbol && baseComponent[\"$$typeof\"] === ReactMemoSymbol) {\n    throw new Error(\"[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.\");\n  }\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n  var useForwardRef = (_options$forwardRef = options == null ? void 0 : options.forwardRef) != null ? _options$forwardRef : false;\n  var render = baseComponent;\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n  // If already wrapped with forwardRef, unwrap,\n  // so we can patch render and apply memo\n  if (ReactForwardRefSymbol && baseComponent[\"$$typeof\"] === ReactForwardRefSymbol) {\n    useForwardRef = true;\n    render = baseComponent[\"render\"];\n    if (typeof render !== \"function\") {\n      throw new Error(\"[mobx-react-lite] `render` property of ForwardRef was not a function\");\n    }\n  }\n  var observerComponent = function observerComponent(props, ref) {\n    return useObserver(function () {\n      return render(props, ref);\n    }, baseComponentName);\n  };\n  observerComponent.displayName = baseComponent.displayName;\n  Object.defineProperty(observerComponent, \"name\", {\n    value: baseComponent.name,\n    writable: true,\n    configurable: true\n  });\n  // Support legacy context: `contextTypes` must be applied before `memo`\n  if (baseComponent.contextTypes) {\n    observerComponent.contextTypes = baseComponent.contextTypes;\n  }\n  if (useForwardRef) {\n    // `forwardRef` must be applied prior `memo`\n    // `forwardRef(observer(cmp))` throws:\n    // \"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))\"\n    observerComponent = React.forwardRef(observerComponent);\n  }\n  // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n  observerComponent = React.memo(observerComponent);\n  copyStaticProperties(baseComponent, observerComponent);\n  {\n    Object.defineProperty(observerComponent, \"contextTypes\", {\n      set: function set() {\n        var _this$type, _this$type2;\n        throw new Error(\"[mobx-react-lite] `\" + (this.displayName || ((_this$type = this.type) == null ? void 0 : _this$type.displayName) || ((_this$type2 = this.type) == null ? void 0 : _this$type2.name) || \"Component\") + \".contextTypes` must be set before applying `observer`.\");\n      }\n    });\n  }\n  return observerComponent;\n}\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true,\n  // Don't redefine `displayName`,\n  // it's defined as getter-setter pair on `memo` (see #3192).\n  displayName: true\n};\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}\n\nfunction ObserverComponent(_ref) {\n  var children = _ref.children,\n    render = _ref.render;\n  var component = children || render;\n  if (typeof component !== \"function\") {\n    return null;\n  }\n  return useObserver(component);\n}\n{\n  ObserverComponent.propTypes = {\n    children: ObserverPropsCheck,\n    render: ObserverPropsCheck\n  };\n}\nObserverComponent.displayName = \"Observer\";\nfunction ObserverPropsCheck(props, key, componentName, location, propFullName) {\n  var extraKey = key === \"children\" ? \"render\" : \"children\";\n  var hasProp = typeof props[key] === \"function\";\n  var hasExtraProp = typeof props[extraKey] === \"function\";\n  if (hasProp && hasExtraProp) {\n    return new Error(\"MobX Observer: Do not use children and render in the same time in`\" + componentName);\n  }\n  if (hasProp || hasExtraProp) {\n    return null;\n  }\n  return new Error(\"Invalid prop `\" + propFullName + \"` of type `\" + typeof props[key] + \"` supplied to\" + \" `\" + componentName + \"`, expected `function`.\");\n}\n\nfunction useLocalObservable(initializer, annotations) {\n  return React.useState(function () {\n    return mobx.observable(initializer(), annotations, {\n      autoBind: true\n    });\n  })[0];\n}\n\nfunction useAsObservableSource(current) {\n  useDeprecated(\"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\");\n  var _useState = React.useState(function () {\n      return mobx.observable(current, {}, {\n        deep: false\n      });\n    }),\n    res = _useState[0];\n  mobx.runInAction(function () {\n    Object.assign(res, current);\n  });\n  return res;\n}\n\nfunction useLocalStore(initializer, current) {\n  {\n    useDeprecated(\"[mobx-react-lite] 'useLocalStore' is deprecated, use 'useLocalObservable' instead.\");\n  }\n  var source = current && useAsObservableSource(current);\n  return React.useState(function () {\n    return mobx.observable(initializer(source), undefined, {\n      autoBind: true\n    });\n  })[0];\n}\n\nvar _observerFinalization;\nobserverBatching(reactDom.unstable_batchedUpdates);\nvar clearTimers = (_observerFinalization = observerFinalizationRegistry[\"finalizeAllImmediately\"]) != null ? _observerFinalization : function () {};\nfunction useObserver$1(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = \"observed\";\n  }\n  {\n    useDeprecated(\"[mobx-react-lite] 'useObserver(fn)' is deprecated. Use `<Observer>{fn}</Observer>` instead, or wrap the entire component in `observer`.\");\n  }\n  return useObserver(fn, baseComponentName);\n}\nfunction useStaticRendering(enable) {\n  {\n    console.warn(\"[mobx-react-lite] 'useStaticRendering' is deprecated, use 'enableStaticRendering' instead\");\n  }\n  enableStaticRendering(enable);\n}\n\nexports.Observer = ObserverComponent;\nexports._observerFinalizationRegistry = observerFinalizationRegistry;\nexports.clearTimers = clearTimers;\nexports.enableStaticRendering = enableStaticRendering;\nexports.isObserverBatched = isObserverBatched;\nexports.isUsingStaticRendering = isUsingStaticRendering;\nexports.observer = observer;\nexports.observerBatching = observerBatching;\nexports.useAsObservableSource = useAsObservableSource;\nexports.useLocalObservable = useLocalObservable;\nexports.useLocalStore = useLocalStore;\nexports.useObserver = useObserver$1;\nexports.useStaticRendering = useStaticRendering;\n//# sourceMappingURL=mobxreactlite.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mobx-react-lite/dist/mobxreactlite.cjs.development.js\n");

/***/ })

};
;